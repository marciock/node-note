<%- contentFor('body') %>

<%- include ../widgets/tool-bar %>
<div class="row" id="dash">
   
  <% for(db of data){ %>
    <p><%- db._id %></p>
    <% }%>
</div>
<div class="row">
      
    <div class="col s6 m3">
        <div class="fixed-action-btn">
          <button type="button" data-target="modalnews" class="btn-floating btn-large  green lighten-1 modal-trigger" id="btn-news">
           <i class="material-icons">add</i>
          </button> 
        </div>


    </div>

<%- include ../modals/modal-news %>


<script src="javascripts/draganddrop.js"></script>
<script src="javascripts/editor.js"></script>
<script src="javascripts/fetchcustom.js"></script>
<script src="socket.io/socket.io.js"></script>
<script>
   
   // button Modal
  const newOk=document.getElementById('new-ok');
    
   // Elements into modals
  const noteTitle=document.getElementById('note-title');
  const noteText=document.getElementById('note-text');
  const modalCard=document.getElementById('modal-card');
  
  

  this.getFocusable='';

  noteText.addEventListener('blur',()=>{
        this.getFocusable=noteText.id;
        console.log(this.getFocusable)
  })

  noteTitle.addEventListener('blur',()=>{
        this.getFocusable=noteTitle.id;

        console.log(this.getFocusable)
  })

  if(noteText.height > modalCard.height){
    modalCard.style.height=auto;
  }
  
    


    window.onload=()=>{
       

        //modal activation
        const options={opacity:0.5}
        const elems = document.querySelectorAll('.modal');
        const instances = M.Modal.init(elems, options);
        const instance=M.Modal.getInstance(elems);
     
      
        // begin an sochet.io       
        const socket=io('http://localhost:3000');


        //button ok confirm save modal-new
      
        newOk.addEventListener('click',()=>{
        
          let imgPost=document.querySelectorAll('[data-name]');
         

         // const fr=new FileReader();

       // let img= fr.readAsDataURL(imgPost.src);

   
          let imgs=[];
          let names=[];
            if(imgPost !== undefined){
              for(img of imgPost){
              //console.log(img.src);
              imgs.push(img.src)
              names.push(img.dataset.name);
            }
          }
          
              /*  let data={
                  title:noteTitle.outerHTML,
                  text:noteText.outerHTML,
                  image:imgs,
                  image_name:names,
                  creation:Date(),
                  active:'true'
                 }
                */
               this.formData.append('title',noteTitle.outerHTML);
               this.formData.append('text',noteText.outerHTML);
               this.formData.append('creation',Date());
               this.formData.append('active','true');
                 console.log(`images- ${this.formData.get('image')}`);

                fetchSaveNote('/save',this.formData);
            
           // socket.emit('schedules');
        })

        

    // Emit reload of data aafter crud
      /*  socket.on('output',data=>{

           // console.log(data);
            let conka='';
            
        
            data.map(dash => {

                
          
           conka +=collapsibleLI(dash._id,dash.title,dash.dateactual,dash.dateend,dash.description);

            }).join('')
            
        //    ul.innerHTML=conka;

        })*/

        

    };

   


</script>
